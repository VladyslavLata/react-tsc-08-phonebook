{"version":3,"file":"static/js/908.3738c32a.chunk.js","mappings":"kTAGaA,EAAQC,EAAAA,GAAAA,MAAY,4HAKZ,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAE,IAI7BC,GAAQJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAa,oNACrB,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAE,IAAI,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAE,IAG5C,SAAAF,GAAC,OAAIA,EAAEC,MAAMI,UAAUC,CAAC,IAC3B,SAAAN,GAAC,OAAIA,EAAEC,MAAMM,QAAQC,CAAC,IACf,SAAAR,GAAC,OAAIA,EAAEC,MAAMQ,MAAMC,EAAE,IACtB,SAAAV,GAAC,OAAIA,EAAEC,MAAMU,OAAOC,WAAW,IAG7B,SAAAZ,GAAC,OAAIA,EAAEC,MAAMU,OAAOE,MAAM,IAIjCC,EAAYf,EAAAA,GAAAA,EAAQ,iDACd,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAE,IAG3Ba,EAAYhB,EAAAA,GAAAA,IAAU,gFAMtBiB,GAAYjB,EAAAA,EAAAA,IAAOkB,EAAAA,GAAPlB,CAAoB,wGAIlC,SAAAC,GAAC,OAAIA,EAAEC,MAAMU,OAAOO,GAAG,IACnB,SAAAlB,GAAC,OAAIA,EAAEC,MAAMI,UAAUc,EAAE,G,uJC3BlCC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAAaG,SAASC,OAAOF,QAAQG,WAC5CC,SAAUN,EAAAA,KAAaG,SAASC,OAAOG,IAAI,GAAGC,IAAI,IAAIH,aAGlDI,EAAgB,CACpBP,MAAO,GACPI,SAAU,IAGCI,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,KAQjB,OACE,SAAC,KAAM,CACLH,cAAeA,EACfI,iBAAkBd,EAClBe,SAXiB,SACnBC,EACAC,GAEAL,GAASM,EAAAA,EAAAA,KAAM,UAAKF,KACpBC,EAAQE,WACV,EAK2B,UAEvB,UAAC,KAAI,YACH,UAAC,KAAK,CAACC,QAAQ,QAAO,WACpB,SAAC,KAAS,qBACV,SAAC,KAAK,CAACC,KAAK,QAAQC,KAAK,WACzB,SAAC,KAAS,WACR,SAAC,IAAS,CAACC,UAAU,IAAID,KAAK,gBAGlC,UAAC,KAAK,CAACF,QAAQ,WAAU,WACvB,SAAC,KAAS,wBACV,SAAC,KAAK,CAACC,KAAK,WAAWC,KAAK,cAC5B,SAAC,KAAS,WACR,SAAC,IAAS,CAACC,UAAU,IAAID,KAAK,mBAGlC,SAACE,EAAA,EAAM,CAACC,OAAO,WAAU,wBAIjC,E,UC/CA,EAR4B,WAC1B,OACE,SAACC,EAAA,EAAG,CAACC,GAAG,OAAOC,GAAI,EAAGC,QAAQ,OAAOC,eAAe,SAAQ,UAC1D,SAACnB,EAAS,KAGhB,C","sources":["components/PhonebookForm/Phonebook.styled.tsx","components/LoginForm/LoginForm.tsx","pages/Login.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Field, ErrorMessage } from 'formik';\n\nexport const Label = styled.label`\n  position: relative;\n  display: block;\n\n  &:not(:last-child) {\n    margin-bottom: ${p => p.theme.space[4]}px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  padding: ${p => p.theme.space[0]} ${p => p.theme.space[3]}px;\n  width: 320px;\n  height: 30px;\n  font-size: ${p => p.theme.fontSizes.s};\n  border: ${p => p.theme.borders.m};\n  border-radius: ${p => p.theme.radii.sm};\n  border-color: ${p => p.theme.colors.bgSecondary};\n\n  &:focus-within {\n    border-color: ${p => p.theme.colors.accent};\n  }\n`;\n\nexport const LabelName = styled.p`\n  margin-bottom: ${p => p.theme.space[2]}px;\n`;\n\nexport const ErrorWrap = styled.div`\n  position: relative;\n  width: 100%;\n  height: 10px;\n`;\n\nexport const ErrorText = styled(ErrorMessage)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  color: ${p => p.theme.colors.red};\n  font-size: ${p => p.theme.fontSizes.xs};\n`;\n","import { Formik, Form, FormikHelpers } from 'formik';\nimport * as yup from 'yup';\nimport {\n  LabelName,\n  Input,\n  ErrorText,\n  Label,\n  ErrorWrap,\n} from 'components/PhonebookForm/Phonebook.styled';\nimport { login } from 'redux/auth/operations';\nimport { useAppDispatch } from 'hooks/TSReduxHooks';\nimport { Button } from 'components/Button/Button';\nimport { IValueForm } from 'types/typers';\n\nconst schema = yup.object().shape({\n  email: yup.string().strict().trim().email().required(),\n  password: yup.string().strict().trim().min(6).max(30).required(),\n});\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nexport const LoginForm = () => {\n  const dispatch = useAppDispatch();\n  const handleSubmit = (\n    values: Pick<IValueForm, 'email' | 'password'>,\n    actions: FormikHelpers<Pick<IValueForm, 'email' | 'password'>>\n  ) => {\n    dispatch(login({ ...values }));\n    actions.resetForm();\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Label htmlFor=\"email\">\n          <LabelName>Email</LabelName>\n          <Input type=\"email\" name=\"email\" />\n          <ErrorWrap>\n            <ErrorText component=\"p\" name=\"email\" />\n          </ErrorWrap>\n        </Label>\n        <Label htmlFor=\"password\">\n          <LabelName>Password</LabelName>\n          <Input type=\"password\" name=\"password\" />\n          <ErrorWrap>\n            <ErrorText component=\"p\" name=\"password\" />\n          </ErrorWrap>\n        </Label>\n        <Button margin=\"32px 0 0\">Log In</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Box } from 'components/Box/Box';\n\nconst LoginPage: React.FC = () => {\n  return (\n    <Box pt=\"80px\" pb={5} display=\"flex\" justifyContent=\"center\">\n      <LoginForm />\n    </Box>\n  );\n};\n\nexport default LoginPage;\n"],"names":["Label","styled","p","theme","space","Input","Field","fontSizes","s","borders","m","radii","sm","colors","bgSecondary","accent","LabelName","ErrorWrap","ErrorText","ErrorMessage","red","xs","schema","yup","shape","email","strict","trim","required","password","min","max","initialValues","LoginForm","dispatch","useAppDispatch","validationSchema","onSubmit","values","actions","login","resetForm","htmlFor","type","name","component","Button","margin","Box","pt","pb","display","justifyContent"],"sourceRoot":""}