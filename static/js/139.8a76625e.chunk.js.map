{"version":3,"file":"static/js/139.8a76625e.chunk.js","mappings":"kTAGaA,EAAQC,EAAAA,GAAAA,MAAH,4HAKG,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAITC,GAAQJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,oNACL,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAAwB,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGxB,SAAAF,GAAC,OAAIA,EAAEC,MAAMI,UAAUC,CAAtB,IACJ,SAAAN,GAAC,OAAIA,EAAEC,MAAMM,QAAQC,CAApB,IACM,SAAAR,GAAC,OAAIA,EAAEC,MAAMQ,MAAMC,EAAlB,IACF,SAAAV,GAAC,OAAIA,EAAEC,MAAMU,OAAOC,WAAnB,IAGC,SAAAZ,GAAC,OAAIA,EAAEC,MAAMU,OAAOE,MAAnB,IAIRC,EAAYf,EAAAA,GAAAA,EAAH,iDACH,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGPa,EAAYhB,EAAAA,GAAAA,IAAH,gFAMTiB,GAAYjB,EAAAA,EAAAA,IAAOkB,EAAAA,GAAPlB,CAAH,wGAIX,SAAAC,GAAC,OAAIA,EAAEC,MAAMU,OAAOO,GAAnB,IACG,SAAAlB,GAAC,OAAIA,EAAEC,MAAMI,UAAUc,EAAtB,G,uJC5BVC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,SAASC,OAAOC,IAAI,GAAGC,IAAI,IAAIC,WAClDC,MAAOR,EAAAA,KAAaG,SAASC,OAAOI,QAAQD,WAC5CE,SAAUT,EAAAA,KAAaG,SAASC,OAAOC,IAAI,GAAGC,IAAI,IAAIC,aAGlDG,EAAgB,CACpBR,KAAM,GACNM,MAAO,GACPC,SAAU,IAGCE,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAKjB,OACE,SAAC,KAAD,CACEH,cAAeA,EACfI,iBAAkBf,EAClBgB,SARiB,SAACC,EAAQC,GAC5BL,GAASM,EAAAA,EAAAA,KAAS,UAAKF,KACvBC,EAAQE,WACT,EAEC,UAKE,UAAC,KAAD,YACE,UAAC,KAAD,CAAOC,QAAQ,OAAf,WACE,SAAC,KAAD,oBACA,SAAC,KAAD,CAAOC,aAAa,MAAMC,KAAK,OAAOpB,KAAK,UAC3C,SAAC,KAAD,WACE,SAAC,IAAD,CAAWqB,UAAU,IAAIrB,KAAK,eAGlC,UAAC,KAAD,CAAOkB,QAAQ,QAAf,WACE,SAAC,KAAD,qBACA,SAAC,KAAD,CAAOE,KAAK,QAAQpB,KAAK,WACzB,SAAC,KAAD,WACE,SAAC,IAAD,CAAWqB,UAAU,IAAIrB,KAAK,gBAGlC,UAAC,KAAD,CAAOkB,QAAQ,WAAf,WACE,SAAC,KAAD,wBACA,SAAC,KAAD,CAAOE,KAAK,WAAWpB,KAAK,cAC5B,SAAC,KAAD,WACE,SAAC,IAAD,CAAWqB,UAAU,IAAIrB,KAAK,mBAGlC,SAACsB,EAAA,EAAD,CAAQC,OAAO,YAAf,0BAIP,E,UCpDD,EARqB,WACnB,OACE,SAACC,EAAA,EAAD,CAAKC,GAAG,OAAOC,GAAI,EAAGC,QAAQ,OAAOC,eAAe,SAApD,UACE,SAACnB,EAAD,KAGL,C","sources":["components/PhonebookForm/Phonebook.styled.js","components/RegisterForm/RegisterForm.js","pages/Register.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Field, ErrorMessage } from 'formik';\n\nexport const Label = styled.label`\n  position: relative;\n  display: block;\n\n  &:not(:last-child) {\n    margin-bottom: ${p => p.theme.space[4]}px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  padding: ${p => p.theme.space[0]} ${p => p.theme.space[3]}px;\n  width: 320px;\n  height: 30px;\n  font-size: ${p => p.theme.fontSizes.s};\n  border: ${p => p.theme.borders.m};\n  border-radius: ${p => p.theme.radii.sm};\n  border-color: ${p => p.theme.colors.bgSecondary};\n\n  &:focus-within {\n    border-color: ${p => p.theme.colors.accent};\n  }\n`;\n\nexport const LabelName = styled.p`\n  margin-bottom: ${p => p.theme.space[2]}px;\n`;\n\nexport const ErrorWrap = styled.div`\n  position: relative;\n  width: 100%;\n  height: 10px;\n`;\n\nexport const ErrorText = styled(ErrorMessage)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  color: ${p => p.theme.colors.red};\n  font-size: ${p => p.theme.fontSizes.xs};\n`;\n","import { Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport {\n  LabelName,\n  ErrorWrap,\n  Input,\n  ErrorText,\n  Label,\n} from 'components/PhonebookForm/Phonebook.styled';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Button } from 'components/Button/Button';\n\nconst schema = yup.object().shape({\n  name: yup.string().strict().trim().min(1).max(30).required(),\n  email: yup.string().strict().trim().email().required(),\n  password: yup.string().strict().trim().min(6).max(30).required(),\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = (values, actions) => {\n    dispatch(register({ ...values }));\n    actions.resetForm();\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Label htmlFor=\"name\">\n          <LabelName>Name</LabelName>\n          <Input autoComplete=\"off\" type=\"text\" name=\"name\" />\n          <ErrorWrap>\n            <ErrorText component=\"p\" name=\"name\" />\n          </ErrorWrap>\n        </Label>\n        <Label htmlFor=\"email\">\n          <LabelName>Email</LabelName>\n          <Input type=\"email\" name=\"email\" />\n          <ErrorWrap>\n            <ErrorText component=\"p\" name=\"email\" />\n          </ErrorWrap>\n        </Label>\n        <Label htmlFor=\"password\">\n          <LabelName>Password</LabelName>\n          <Input type=\"password\" name=\"password\" />\n          <ErrorWrap>\n            <ErrorText component=\"p\" name=\"password\" />\n          </ErrorWrap>\n        </Label>\n        <Button margin=\"32px 0 0 \">Register</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Box } from 'components/Box/Box';\n\nconst RegisterPage = () => {\n  return (\n    <Box pt=\"80px\" pb={5} display=\"flex\" justifyContent=\"center\">\n      <RegisterForm />\n    </Box>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["Label","styled","p","theme","space","Input","Field","fontSizes","s","borders","m","radii","sm","colors","bgSecondary","accent","LabelName","ErrorWrap","ErrorText","ErrorMessage","red","xs","schema","yup","shape","name","strict","trim","min","max","required","email","password","initialValues","RegisterForm","dispatch","useDispatch","validationSchema","onSubmit","values","actions","register","resetForm","htmlFor","autoComplete","type","component","Button","margin","Box","pt","pb","display","justifyContent"],"sourceRoot":""}